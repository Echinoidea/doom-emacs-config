# -*- mode: snippet -*-
# name: nextjs-api-route
# key: nextroute
# --
import { getServerSession } from "next-auth/next";
import { authOptions } from "@/lib/nextauth";
import { PrismaClient } from "@prisma/client";
import { z } from "zod";

const prisma = new PrismaClient();

const querySchema = z.object({
  ${1:id}: z.string().transform(Number).optional(),
  ${2:status}: z.string().optional(),
  limit: z.string().transform(Number).default('${3:50}'),
});

export async function GET(req: Request) {
  const session = await getServerSession(authOptions);
  if (!session) {
    return new Response("Unauthorized", { status: 401 });
  }

  try {
    const url = new URL(req.url);
    const queryParams = Object.fromEntries(url.searchParams);
    const params = querySchema.parse(queryParams);

    const ${4:results} = await prisma.${5:table}.${6:findMany}({
      where: {
        ${7:user_id}: Number(session.user.${8:id}),
        ${9:// Add conditions based on params}
      },
    });

    return Response.json(${4:results}, { status: 200 });

  } catch (error) {
    if (error instanceof z.ZodError) {
      return Response.json(
        { error: "Invalid query parameters", details: error.errors },
        { status: 400 }
      );
    }

    console.error("${10:Endpoint} error:", error);
    return new Response("Internal Server Error", { status: 500 });
  }
}

${0:}